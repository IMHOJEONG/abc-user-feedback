/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    get: operations["HealthController_check"];
  };
  "/api/v1/user/current": {
    get: operations["UserController_getCurrentUser"];
  };
  "/api/v1/user/setting": {
    put: operations["UserController_updateUserProfile"];
  };
  "/api/v1/user": {
    delete: operations["UserController_deleteSelfUser"];
  };
  "/api/v1/admin/user": {
    get: operations["UserController_getUsers"];
  };
  "/api/v1/admin/user/{userId}": {
    delete: operations["UserController_deleteUser"];
  };
  "/api/v1/admin/permissions": {
    get: operations["PermissionController_findAll"];
  };
  "/api/v1/admin/service": {
    get: operations["AdminController_getService"];
    put: operations["AdminController_updateService"];
  };
  "/api/v1/admin/service/invitation": {
    put: operations["AdminController_updateInvitation"];
  };
  "/api/v1/admin/feedback": {
    get: operations["FeedbackController_getAll"];
    post: operations["FeedbackController_createFeedback"];
  };
  "/api/v1/admin/feedback/{idOrCode}": {
    get: operations["FeedbackController_findByIdOrCode"];
    delete: operations["FeedbackController_deleteFeedback"];
    patch: operations["FeedbackController_updateFeedback"];
  };
  "/api/v1/admin/feedback/{idOrCode}/response": {
    get: operations["FeedbackController_getAllResponse"];
  };
  "/api/v1/admin/feedback/{idOrCode}/response/{id}": {
    get: operations["FeedbackController_getResponseById"];
    delete: operations["FeedbackController_deleteReponse"];
  };
  "/api/v1/admin/feedback/{idOrCode}/response-export": {
    get: operations["FeedbackController_exportResponse"];
  };
  "/api/v1/feedback/{idOrCode}/response": {
    post: operations["FeedbackController_createResponse"];
  };
  "/api/v1/auth/login": {
    post: operations["AuthController_login"];
  };
  "/api/v1/auth/register": {
    post: operations["AuthController_signUp"];
  };
  "/api/v1/auth/confirm": {
    post: operations["AuthController_confirm"];
  };
  "/api/v1/auth/password": {
    post: operations["AuthController_changePassword"];
  };
  "/api/v1/auth/password/reset": {
    post: operations["AuthController_resetPassword"];
  };
  "/api/v1/auth/mail/reset-password": {
    post: operations["AuthController_sendResetPasswordMail"];
  };
  "/api/v1/admin/auth/mail/invitation": {
    post: operations["AuthController_sendInvitationMail"];
  };
  "/api/v1/auth/logout": {
    post: operations["AuthController_handleLogout"];
  };
  "/api/v1/tenant": {
    post: operations["TenantController_createService"];
  };
  "/api/v1/admin/roles": {
    get: operations["RoleController_findAll"];
    post: operations["RoleController_create"];
  };
  "/api/v1/admin/roles/{roleName}": {
    get: operations["RoleController_findRoleByName"];
    put: operations["RoleController_updateRole"];
    delete: operations["RoleController_remove"];
  };
  "/api/v1/admin/roles/binding/user": {
    post: operations["RoleController_roleUserBinding"];
    delete: operations["RoleController_roleUserUnbinding"];
  };
  "/api/v1/admin/roles/binding/permission": {
    get: operations["RoleController_getRolePermissions"];
    post: operations["RoleController_rolePermissionBinding"];
    delete: operations["RoleController_rolePermissionUnbinding"];
  };
}

export interface components {
  schemas: {
    UpdateUserDto: {
      /** @description user nickname */
      nickname: string;
    };
    UserDto: {
      id: string;
      email: string;
      profile: { [key: string]: unknown };
      role: { [key: string]: unknown };
      nickname: string;
      avatarUrl: string;
    };
    Service: {
      version: number;
      name: string;
      description: string;
      entryPath: string;
      logoUrl: string;
      locale: string;
      isPrivate: boolean;
      isRestrictDomain: boolean;
      allowDomains: string[];
      /** Format: date-time */
      createdTime: string;
      /** Format: date-time */
      updatedTime: string;
    };
    UpdateServiceDto: {
      name: string;
      description?: string;
      logoUrl?: string;
      locale?: string;
      entryPath?: string;
      isPrivate?: boolean;
    };
    UpdateServiceInvitationDto: {
      isRestrictDomain: boolean;
      allowDomains?: string[];
    };
    FeedbackFieldOption: {
      id: string;
      label: string;
      value: string;
      feedbackFieldId: string;
    };
    FeedbackField: {
      id: string;
      name: string;
      description: string;
      /** @enum {string} */
      type: "text" | "textarea" | "select" | "number" | "boolean" | "datetime";
      isRequired: boolean;
      order: number;
      feedbackId: string;
      options: components["schemas"]["FeedbackFieldOption"][];
    };
    FeedbackDto: {
      id: string;
      title: string;
      description: string;
      allowAnonymous: boolean;
      code: string;
      /** Format: date-time */
      createdTime: string;
      /** Format: date-time */
      updatedTime: string;
      fields: components["schemas"]["FeedbackField"][];
    };
    FeedbackResponseDto: { [key: string]: unknown };
    CreateFeedbackDto: { [key: string]: unknown };
    UpdateFeedbackDto: { [key: string]: unknown };
    SignInDto: {
      email: string;
      password: string;
      rememberEmail?: boolean;
    };
    SignUpDto: { [key: string]: unknown };
    ConfirmDto: { [key: string]: unknown };
    ChangePasswordDto: { [key: string]: unknown };
    ResetPasswordDto: { [key: string]: unknown };
    SendResetPasswordMailDto: { [key: string]: unknown };
    InvitationMailDto: { [key: string]: unknown };
    CreateServiceDto: {
      name: string;
      description?: string;
      logoUrl?: string;
    };
    CreateRoleDto: {
      name: string;
      description: string;
    };
    RoleDto: {
      id: string;
      name: string;
      description: string;
      /** Format: date-time */
      createdTime: string;
      /** Format: date-time */
      updatedTime: string;
    };
    UpdateRoleDto: {
      name?: string;
      description?: string;
    };
    RoleUserDto: { [key: string]: unknown };
    RolePermissionDto: { [key: string]: unknown };
    PaginatedResultDto: {
      total: number;
    };
  };
}

export interface operations {
  HealthController_check: {
    parameters: {};
    responses: {
      /** The Health Check is successful */
      200: {
        content: {
          "application/json": {
            /** @example ok */
            status?: string;
            /** @example [object Object] */
            info?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /** @example [object Object] */
            error?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /** @example [object Object] */
            details?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            };
          };
        };
      };
      /** The Health Check is not successful */
      503: {
        content: {
          "application/json": {
            /** @example error */
            status?: string;
            /** @example [object Object] */
            info?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /** @example [object Object] */
            error?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            } | null;
            /** @example [object Object] */
            details?: {
              [key: string]: {
                status?: string;
              } & { [key: string]: string };
            };
          };
        };
      };
    };
  };
  UserController_getCurrentUser: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  UserController_updateUserProfile: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
  };
  UserController_deleteSelfUser: {
    parameters: {};
    responses: {
      204: never;
    };
  };
  UserController_getUsers: {
    parameters: {
      query: {
        order?: "DESC" | "ASC";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResultDto"] & {
            results?: components["schemas"]["UserDto"][];
          };
        };
      };
    };
  };
  UserController_deleteUser: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  PermissionController_findAll: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  AdminController_getService: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
    };
  };
  AdminController_updateService: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateServiceDto"];
      };
    };
  };
  AdminController_updateInvitation: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateServiceInvitationDto"];
      };
    };
  };
  FeedbackController_getAll: {
    parameters: {
      query: {
        order?: "DESC" | "ASC";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResultDto"] & {
            results?: components["schemas"]["FeedbackDto"][];
          };
        };
      };
    };
  };
  FeedbackController_createFeedback: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFeedbackDto"];
      };
    };
  };
  FeedbackController_findByIdOrCode: {
    parameters: {
      path: {
        /** feedback code or uuid */
        idOrCode: string | number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeedbackDto"];
        };
      };
    };
  };
  FeedbackController_deleteFeedback: {
    parameters: {
      path: {
        /** feedback code or uuid */
        idOrCode: string | number;
      };
    };
    responses: {
      204: never;
    };
  };
  FeedbackController_updateFeedback: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFeedbackDto"];
      };
    };
  };
  FeedbackController_getAllResponse: {
    parameters: {
      query: {
        order?: "DESC" | "ASC";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResultDto"] & {
            results?: components["schemas"]["FeedbackResponseDto"][];
          };
        };
      };
    };
  };
  FeedbackController_getResponseById: {
    parameters: {
      path: {
        /** feedback response id */
        id: number;
        /** feedback code or uuid */
        idOrCode: string | number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  FeedbackController_deleteReponse: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  FeedbackController_exportResponse: {
    parameters: {
      path: {
        /** feedback code or uuid */
        idOrCode: string | number;
      };
    };
    responses: {
      200: unknown;
    };
  };
  FeedbackController_createResponse: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  AuthController_login: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
  };
  AuthController_signUp: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpDto"];
      };
    };
  };
  AuthController_confirm: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfirmDto"];
      };
    };
  };
  AuthController_changePassword: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordDto"];
      };
    };
  };
  AuthController_resetPassword: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordDto"];
      };
    };
  };
  AuthController_sendResetPasswordMail: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendResetPasswordMailDto"];
      };
    };
  };
  AuthController_sendInvitationMail: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvitationMailDto"];
      };
    };
  };
  AuthController_handleLogout: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  TenantController_createService: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateServiceDto"];
      };
    };
  };
  RoleController_findAll: {
    parameters: {
      query: {
        order?: "DESC" | "ASC";
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResultDto"] & {
            results?: components["schemas"]["RoleDto"][];
          };
        };
      };
    };
  };
  RoleController_create: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleDto"];
      };
    };
  };
  RoleController_findRoleByName: {
    parameters: {
      path: {
        roleName: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  RoleController_updateRole: {
    parameters: {
      path: {
        roleName: string;
      };
    };
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleDto"];
      };
    };
  };
  RoleController_remove: {
    parameters: {
      path: {
        roleName: string;
      };
    };
    responses: {
      204: never;
    };
  };
  RoleController_roleUserBinding: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleUserDto"];
      };
    };
  };
  RoleController_roleUserUnbinding: {
    parameters: {};
    responses: {
      204: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleUserDto"];
      };
    };
  };
  RoleController_getRolePermissions: {
    parameters: {
      query: {
        roleName: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  RoleController_rolePermissionBinding: {
    parameters: {};
    responses: {
      201: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RolePermissionDto"];
      };
    };
  };
  RoleController_rolePermissionUnbinding: {
    parameters: {};
    responses: {
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RolePermissionDto"];
      };
    };
  };
}

export interface external {}
