/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/metrics": {
    get: operations["PrometheusController_index"];
  };
  "/api/roles": {
    get: operations["RoleController_getAllRole"];
    post: operations["RoleController_createRole"];
  };
  "/api/roles/{id}": {
    get: operations["RoleController_getRoleById"];
    put: operations["RoleController_updateRole"];
    delete: operations["RoleController_deleteRole"];
  };
  "/api/tenant": {
    get: operations["TenantController_get"];
    put: operations["TenantController_update"];
    post: operations["TenantController_setup"];
  };
  "/api/users": {
    get: operations["UserController_getAllUsers"];
    delete: operations["UserController_deleteUsers"];
  };
  "/api/users/{id}": {
    get: operations["UserController_getUser"];
    delete: operations["UserController_deleteUser"];
  };
  "/api/users/{id}/role": {
    put: operations["UserController_updateRole"];
  };
  "/api/users/invite": {
    post: operations["UserController_inviteUser"];
  };
  "/api/users/password/reset/code": {
    post: operations["UserController_requestResetPassword"];
  };
  "/api/users/password/reset": {
    post: operations["UserController_resetPassword"];
  };
  "/api/users/password/change": {
    post: operations["UserController_changePassword"];
  };
  "/api/auth/email/code": {
    post: operations["AuthController_sendCode"];
  };
  "/api/auth/email/code/verify": {
    post: operations["AuthController_verifyEmailCode"];
  };
  "/api/auth/signUp/email": {
    post: operations["AuthController_signUpEmailUser"];
  };
  "/api/auth/signUp/invitation": {
    post: operations["AuthController_signUpInvitationUser"];
  };
  "/api/auth/signIn/email": {
    post: operations["AuthController_signInEmail"];
  };
  "/api/auth/signIn/google": {
    get: operations["AuthController_googleLogin"];
  };
  "/api/auth/refresh": {
    get: operations["AuthController_refreshToken"];
  };
  "/api/projects": {
    get: operations["ProjectController_findAll"];
    post: operations["ProjectController_create"];
  };
  "/api/projects/{id}": {
    get: operations["ProjectController_findOne"];
    put: operations["ProjectController_updateOne"];
  };
  "/api/projects/{projectId}/channels": {
    get: operations["ChannelController_findAllByProjectId"];
    post: operations["ChannelController_create"];
  };
  "/api/channels/{id}": {
    get: operations["ChannelController_findOne"];
    put: operations["ChannelController_updateOne"];
  };
  "/api/channels/{channelId}/fields": {
    get: operations["FieldController_findByChannelId"];
  };
  "/api/channels/{channelId}/feedbacks": {
    post: operations["FeedbackController_create"];
  };
  "/api/channels/{channelId}/feedbacks/search": {
    post: operations["FeedbackController_findByChannelId"];
  };
  "/api/channels/{channelId}/feedbacks/export": {
    post: operations["FeedbackController_exportFeedbacks"];
  };
  "/api/channels/{channelId}/feedbacks/{feedbackId}/field/{fieldId}": {
    put: operations["FeedbackController_upsertFeedbackItem"];
  };
  "/api/field/{fieldId}/options": {
    get: operations["OptionController_getOptions"];
    post: operations["OptionController_creaetOption"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    GetAllRoleResponseRoleDto: {
      id: string;
      name: string;
      permissions: ("service_management" | "role_management" | "user_management" | "project_management")[];
    };
    GetAllRoleResponseDto: {
      roles: (components["schemas"]["GetAllRoleResponseRoleDto"])[];
      total: number;
    };
    CreateRoleRequestDto: {
      name: string;
      permissions: ("service_management" | "role_management" | "user_management" | "project_management")[];
    };
    GetRoleByIdResponseDto: {
      id: string;
      name: string;
      permissions: ("service_management" | "role_management" | "user_management" | "project_management")[];
    };
    UpdateRoleRequestDto: {
      name: string;
      permissions: ("service_management" | "role_management" | "user_management" | "project_management")[];
    };
    SetupTenantRequestDto: {
      siteName: string;
      isPrivate: boolean;
      isRestrictDomain: boolean;
      allowDomains: (string)[];
    };
    UpdateTenantRequestDefaultRoleDto: {
      id: string;
    };
    UpdateTenantRequestDto: {
      id: string;
      siteName: string;
      isPrivate: boolean;
      isRestrictDomain: boolean;
      allowDomains: (string)[];
      defaultRole: components["schemas"]["UpdateTenantRequestDefaultRoleDto"];
    };
    GetTenantResponseRoleDto: {
      id: string;
      name: string;
      permissions: ("service_management" | "role_management" | "user_management" | "project_management")[];
    };
    GetTenantResponseDto: {
      id: string;
      siteName: string;
      isPrivate: boolean;
      isRestrictDomain: boolean;
      allowDomains: (string)[];
      defaultRole: components["schemas"]["GetTenantResponseRoleDto"];
    };
    PaginationMetaDto: {
      itemCount: number;
      totalItems: number;
      itemsPerPage: number;
      totalPages: number;
      currentPage: number;
    };
    GetAllUserResponse: {
      id: string;
      email: string;
      roleName: string;
    };
    GetAllUserResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: (components["schemas"]["GetAllUserResponse"])[];
    };
    DeleteUsersRequestDto: {
      ids: (string)[];
    };
    UserDto: {
      id: string;
      email: string;
      roleName: string;
      permissions: ("service_management" | "role_management" | "user_management" | "project_management")[];
    };
    UpdateUserRoleRequestDto: {
      roleId: string;
    };
    UserInvitationRequestDto: {
      email: string;
      roleId: string;
    };
    ResetPasswordMailingRequestDto: {
      email: string;
    };
    ResetPasswordRequestDto: {
      email: string;
      code: string;
      password: string;
    };
    ChangePasswordRequestDto: {
      password: string;
      newPassword: string;
    };
    EmailVerificationMailingRequestDto: {
      email: string;
    };
    SendEmailCodeResponseDto: {
      expiredAt: string;
    };
    EmailVerificationCodeRequestDto: {
      email: string;
      code: string;
    };
    EmailUserSignUpRequestDto: {
      email: string;
      password: string;
    };
    InvitationUserSignUpRequestDto: {
      password: string;
      code: string;
      email: string;
    };
    EmailUserSignInRequestDto: {
      email: string;
      password: string;
    };
    SignInResponseDto: {
      accessToken: string;
      refreshToken: string;
    };
    CreateProjectRequestDto: {
      name: string;
      description: string;
    };
    CreateProjectResponseDto: {
      id: string;
    };
    FindProjectByIdResponseDto: {
      id: string;
      name: string;
      description: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindProjectsResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: (components["schemas"]["FindProjectByIdResponseDto"])[];
    };
    UpdateProjectRequestDto: {
      name: string;
      description: string;
    };
    UpdateProjectResponseDto: {
      id: string;
    };
    /** @enum {string} */
    FieldTypeEnum: "text" | "keyword" | "number" | "boolean" | "select" | "date";
    CreateChannelRequestFieldSelectOptionDto: {
      name: string;
    };
    CreateChannelRequestFieldDto: {
      type: components["schemas"]["FieldTypeEnum"];
      name: string;
      description?: string;
      isAdmin: boolean;
      isDisabled: boolean;
      order: number;
      options?: (components["schemas"]["CreateChannelRequestFieldSelectOptionDto"])[];
    };
    CreateChannelRequestDto: {
      name: string;
      description?: string;
      fields: (components["schemas"]["CreateChannelRequestFieldDto"])[];
    };
    CreateChannelResponseDto: {
      id: string;
    };
    FindChannelByIdResponseDto: {
      id: string;
      name: string;
      description: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    FindChannelsByProjectIdResponseDto: {
      meta: components["schemas"]["PaginationMetaDto"];
      items: (components["schemas"]["FindChannelByIdResponseDto"])[];
    };
    UpdateChannelRequestFieldDto: {
      type: components["schemas"]["FieldTypeEnum"];
      name: string;
      description?: string;
      isAdmin: boolean;
      isDisabled: boolean;
      order: number;
      options?: (components["schemas"]["CreateChannelRequestFieldSelectOptionDto"])[];
      id?: string;
    };
    UpdateChannelRequestDto: {
      name: string;
      description?: string;
      fields: (components["schemas"]["UpdateChannelRequestFieldDto"])[];
    };
    UpdateChannelResponseDto: {
      id: string;
    };
    FindFieldsResponseSelectOptionDto: {
      id: string;
      name: string;
    };
    FindFieldsResponseDto: {
      id: string;
      /** @enum {string} */
      type: "text" | "keyword" | "number" | "boolean" | "select" | "date";
      name: string;
      description: string;
      isAdmin: boolean;
      isDisabled: boolean;
      order: number;
      options: (components["schemas"]["FindFieldsResponseSelectOptionDto"])[];
    };
    FindFeedbacksByChannelIdRequestDto: {
      /** @default 10 */
      limit?: number;
      /** @default 1 */
      page?: number;
      query?: Record<string, never>;
    };
    FindFeedbacksByChannelIdResponseDto: {
      items: (Record<string, never>)[];
      total: number;
    };
    ExportFeedbacksRequestDto: {
      /** @default 10 */
      limit?: number;
      /** @default 1 */
      page?: number;
      query?: Record<string, never>;
      type?: string;
    };
    UpsertFeedbackItemRequestDto: {
      value: Record<string, never>;
    };
    FindOptionByFieldIdResponseDto: {
      id: string;
      name: string;
    };
    CreateOptionRequestDto: {
      name: string;
    };
    CreateOptionResponseDto: {
      id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  PrometheusController_index: {
    responses: {
      200: never;
    };
  };
  RoleController_getAllRole: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAllRoleResponseDto"];
        };
      };
    };
  };
  RoleController_createRole: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  RoleController_getRoleById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetRoleByIdResponseDto"];
        };
      };
    };
  };
  RoleController_updateRole: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleRequestDto"];
      };
    };
    responses: {
      204: never;
    };
  };
  RoleController_deleteRole: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
    };
  };
  TenantController_get: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetTenantResponseDto"];
        };
      };
    };
  };
  TenantController_update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTenantRequestDto"];
      };
    };
    responses: {
      204: never;
    };
  };
  TenantController_setup: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetupTenantRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  UserController_getAllUsers: {
    parameters: {
      query: {
        limit?: number;
        page?: number;
        keyword?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetAllUserResponseDto"];
        };
      };
    };
  };
  UserController_deleteUsers: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteUsersRequestDto"];
      };
    };
    responses: {
      200: never;
    };
  };
  UserController_getUser: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserDto"];
        };
      };
    };
  };
  UserController_deleteUser: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
    };
  };
  UserController_updateRole: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRoleRequestDto"];
      };
    };
    responses: {
      204: never;
    };
  };
  UserController_inviteUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserInvitationRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  UserController_requestResetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordMailingRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  UserController_resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  UserController_changePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  AuthController_sendCode: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailVerificationMailingRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SendEmailCodeResponseDto"];
        };
      };
    };
  };
  AuthController_verifyEmailCode: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailVerificationCodeRequestDto"];
      };
    };
    responses: {
      200: never;
    };
  };
  AuthController_signUpEmailUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailUserSignUpRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  AuthController_signUpInvitationUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvitationUserSignUpRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  AuthController_signInEmail: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailUserSignInRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SignInResponseDto"];
        };
      };
    };
  };
  AuthController_googleLogin: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SignInResponseDto"];
        };
      };
    };
  };
  AuthController_refreshToken: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SignInResponseDto"];
        };
      };
    };
  };
  ProjectController_findAll: {
    parameters: {
      query: {
        limit?: number;
        page?: number;
        keyword?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindProjectsResponseDto"];
        };
      };
    };
  };
  ProjectController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateProjectResponseDto"];
        };
      };
    };
  };
  ProjectController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindProjectByIdResponseDto"];
        };
      };
    };
  };
  ProjectController_updateOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProjectRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateProjectResponseDto"];
        };
      };
    };
  };
  ChannelController_findAllByProjectId: {
    parameters: {
      query: {
        limit?: number;
        page?: number;
        keyword?: string;
      };
      path: {
        projectId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindChannelsByProjectIdResponseDto"];
        };
      };
    };
  };
  ChannelController_create: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChannelRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateChannelResponseDto"];
        };
      };
    };
  };
  ChannelController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindChannelByIdResponseDto"];
        };
      };
    };
  };
  ChannelController_updateOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateChannelRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateChannelResponseDto"];
        };
      };
    };
  };
  FieldController_findByChannelId: {
    parameters: {
      path: {
        channelId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["FindFieldsResponseDto"])[];
        };
      };
    };
  };
  FeedbackController_create: {
    parameters: {
      path: {
        channelId: string;
      };
    };
    responses: {
      201: never;
    };
  };
  FeedbackController_findByChannelId: {
    parameters: {
      path: {
        channelId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FindFeedbacksByChannelIdRequestDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FindFeedbacksByChannelIdResponseDto"];
        };
      };
    };
  };
  FeedbackController_exportFeedbacks: {
    parameters: {
      path: {
        channelId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportFeedbacksRequestDto"];
      };
    };
    responses: {
      201: never;
    };
  };
  FeedbackController_upsertFeedbackItem: {
    parameters: {
      path: {
        channelId: string;
        feedbackId: string;
        fieldId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpsertFeedbackItemRequestDto"];
      };
    };
    responses: {
      200: never;
    };
  };
  OptionController_getOptions: {
    parameters: {
      path: {
        fieldId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["FindOptionByFieldIdResponseDto"])[];
        };
      };
    };
  };
  OptionController_creaetOption: {
    parameters: {
      path: {
        fieldId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOptionRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateOptionResponseDto"];
        };
      };
    };
  };
}
